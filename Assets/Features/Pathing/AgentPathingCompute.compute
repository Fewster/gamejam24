// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Agent
{
    float3 position;
    float hash;
    int path;
    int goal;
};

struct Path
{
    int count;
    float3 points[8];
};

RWStructuredBuffer<Agent> AgentBuffer;
int AgentCount;

StructuredBuffer<Path> Paths;

float _Time;

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Agent agent = AgentBuffer[id.x];
    Path path = Paths[agent.path];
    
    float3 target = path.points[agent.goal];
    float angle = agent.hash * 360.0;
    float2x2 rotMat = float2x2(cos(angle), -sin(angle),
                               sin(angle), cos(angle));
    
    target.xz += mul(rotMat, float2(1, 0)) * 0.2;
    //
    float3 dir = normalize(target - agent.position);
    agent.position += dir * 0.01;
    
    agent.position.y = target.y + max(0, sin(10 * _Time + agent.hash * 4218.0)) * 0.1;
    
    if (length(target - agent.position) < 0.1)
    {
        agent.goal++;
        if (agent.goal >= 8)
        {
            agent.goal = 0;
        }
    }
    
    AgentBuffer[id.x] = agent;
}
